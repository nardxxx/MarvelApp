{"version":3,"file":"static/js/666.6d49b2c9.chunk.js","mappings":"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","sources":["components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charForm/CharForm.js","components/pages/MainPage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\n\nimport './randomChar.scss';\n\nfunction RandomChar() {\n    const [char, setChar] = useState({});\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null\n\n    return (\n        <div className=\"randomchar\" >\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, styles } = char;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} style={styles} alt=\"Random character\" className=\"randomchar__img\" />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import React, { useEffect, useState, useRef } from 'react';\n\nimport Spinner from '../spinner/Spinner';\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup, } from 'react-transition-group';\n\nimport './charList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />\n        case 'confirmed':\n            return <Component />\n        case 'error':\n            return <ErrorMessage />\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n    const [chars, setChars] = useState([]),\n        [newItemLoading, setNewItemLoading] = useState(false),\n        [offset, setOffset] = useState(210),\n        [charEnded, setCharEnded] = useState(false),\n        [charId, setCharId] = useState(null);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => onRequest(offset, true), []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then();\n    }\n\n    const onCharListLoaded = (newChars) => {\n        let ended = false;\n        if (newChars.length < 9) ended = true;\n\n        setChars(charlist => [...chars, ...newChars]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems(arr) {\n        let delay = 0;\n        let delayJump = 100;\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n            if (delay >= 900) delay = 100\n            else delay += delayJump\n            return (\n                <CSSTransition\n                    timeout={100}\n                    classNames=\"char__item\">\n                    <li\n                        style={{ transition: `opacity 500ms ease ${delay}ms, transform 0.3s ease` }}\n                        className={`char__item`}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        tabIndex={i + 1}\n                        onClick={\n                            () => {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                                setCharId(item.id);\n                            }\n                        }\n                        onKeyPress={\n                            (e) => {\n                                if (e.key == ' ' || e.key == 'Enter') {\n                                    props.onCharSelected(item.id);\n                                    focusOnItem(i);\n                                    setCharId(item.id);\n                                }\n                            }\n                        }>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <TransitionGroup className=\"char__grid\" component='ul'>\n                {items}\n            </TransitionGroup>\n        )\n    }\n\n    const items = renderItems(chars);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">{newItemLoading ? <Spinner width='100%' height=\"18px\" /> : 'load more'}</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;\n\n\n\n\n\n\n\n\n\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/errorMessage';\nimport Skeleton from '../skeleton/Skeleton'\n\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charInfo.scss';\nimport { Link } from 'react-router-dom';\n\nfunction CharInfo(props) {\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, []);\n\n    useEffect(() => {\n        updateChar();\n    }, [props.charId])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        const { charId } = props;\n\n        if (!charId) {\n            return;\n        }\n        clearError();\n\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics, styles } = char;\n\n    const limitedComicsList = [];\n\n    for (let i = 0; i < comics.length; i++) {\n        if (i >= 9) break;\n        console.log();\n        limitedComicsList.push(\n            <li key={i + 1} className=\"char__comics-item\">\n                <Link to={`comics/${comics[i].resourceURI.slice(43)}`}>{comics[i].name}</Link>\n            </li>)\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} style={styles} alt={name} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length <= 0 ? 'There is not comics with this character' : null}\n                {\n                    limitedComicsList\n                }\n            </ul>\n        </>\n    )\n}\n\n// CharInfo.defaultProps = {\n//     charId: PropTypes.string\n// }\n// CharInfo.propTypes = {\n//     charId: PropTypes.number\n// }\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/errorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\n\r\nimport { memo, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport Spinner from '../spinner/Spinner';\r\nimport useMarvelService from '../../services/MarvelService';\r\n\r\nimport './charForm.scss'\r\n\r\nconst areEqual = (prevProps, nextProps) => {\r\n    if (prevProps.heading === nextProps.heading) {\r\n        return true                                    // donot re-render\r\n    }\r\n    return false                                     // will re-render\r\n}\r\n\r\nconst CharForm = ({ props }) => {\r\n\r\n    const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n    const [inputVal, setInputVal] = useState('');\r\n    const [char, setChar] = useState(null);\r\n\r\n    const onSearchDone = (char, val) => {\r\n        setChar(char);\r\n        setInputVal(val)\r\n    }\r\n    const clearData = () => {\r\n        setChar(null);\r\n        clearError();\r\n    }\r\n\r\n    const result = char == null ? null :\r\n        <div className=\"message\">\r\n            {char === 0 ? <div className='error'>The character was not found. Check the name and try again</div> : null}\r\n            {char ?\r\n                <>\r\n                    <div className='success'>There is! Visit {char.name} page?</div>\r\n\r\n                </> : null}\r\n            {error ? <div className='error'>Something went wrong</div> : null}\r\n        </div>\r\n\r\n    return (\r\n        <div className='formik'>\r\n            <Formik\r\n                initialValues={{ search: '' }}\r\n                validationSchema={Yup.object({\r\n                    search: Yup.string()\r\n                        .required('This field is required'),\r\n                })}\r\n                onSubmit={\r\n                    values => {\r\n                        if (values.search !== inputVal) {\r\n                            getCharacterByName(values.search)\r\n                                .then(char => {\r\n                                    onSearchDone(char, values.search);\r\n                                })\r\n                                .catch(() => {\r\n                                    setChar(0)\r\n                                })\r\n                        }\r\n                    }\r\n                }>\r\n\r\n                <Form className=\"char-form\">\r\n                    <label className=\"char-form__title\">Or find a character by name:</label>\r\n                    <Field\r\n                        placeholder=\"Enter name\"\r\n                        className=\"char-form__input\"\r\n                        name=\"search\" type=\"input\"\r\n                        onInput={() => clearData()} />\r\n                    <div className='char-form__btns'>\r\n                        <button\r\n                            className=\"char-form__btn\"\r\n                            type=\"submit\"\r\n                            style={{ backgroundColor: loading ? '#61121b' : '' }}\r\n                            disabled={loading}>{loading ? <Spinner height='70%' /> : 'Find'}</button>\r\n                        {char ? <Link\r\n                            to={char.name}\r\n                            onFocus={e => e.target.parentElement.classList.add('active')}\r\n                            onBlur={e => e.target.parentElement.classList.remove('active')}\r\n                            className={`char-form__btn char-form__btn-gray`} >\r\n                            Go To\r\n                        </Link> : ''}\r\n                    </div>\r\n\r\n                    <FormikErrorMessage name=\"search\"\r\n                        component=\"div\"\r\n                        className='error'\r\n                        styles={{ gridArea: 'error' }} />\r\n                </Form >\r\n            </Formik >\r\n            {result}\r\n        </div >\r\n\r\n    )\r\n}\r\n// export default memo(CharForm, areEqual)\r\n\r\nexport default CharForm;\r\n\r\n","import { useState } from \"react\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharForm from '../charForm/CharForm'\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    function onCharSelected(id) {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <ErrorBoundary>\r\n                    <div>\r\n                        <CharInfo charId={selectedChar} />\r\n                        <CharForm />\r\n                    </div>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"names":["View","char","name","description","thumbnail","homepage","wiki","styles","className","src","style","alt","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","spinner","content","onClick","props","chars","setChars","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","setCharId","getAllCharacters","onRequest","initial","onCharListLoaded","newChars","ended","length","charlist","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","delay","map","i","imgStyle","CSSTransition","timeout","classNames","transition","ref","el","tabIndex","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","width","height","comics","limitedComicsList","console","log","push","to","resourceURI","slice","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","getCharacterByName","inputVal","setInputVal","result","initialValues","search","validationSchema","Yup","required","onSubmit","values","val","onSearchDone","catch","placeholder","type","onInput","backgroundColor","onFocus","target","parentElement","onBlur","gridArea","selectedChar","Helmet","decoration"],"sourceRoot":""}